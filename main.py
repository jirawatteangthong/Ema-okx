import os
import math
import time
import ccxt
import logging

# ---------------- CONFIG (‡∏ù‡∏±‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î) ----------------
API_KEY  = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET   = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')

SYMBOL = 'BTC-USDT-SWAP'   # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö ccxt.okx ‡πÑ‡∏î‡πâ (amount = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô "contracts")

# ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏ô/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
PORTFOLIO_PERCENTAGE = 0.80   # ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô‡∏Å‡∏µ‡πà % ‡∏Ç‡∏≠‡∏á available
LEVERAGE = 31                 # ‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à

# ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô 51008 ‡∏á‡πà‡∏≤‡∏¢
SAFETY_PCT = 0.70            # ‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏∏‡∏ô (conservative)
FIXED_BUFFER_USDT = 8.0      # ‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°/‡πÄ‡∏®‡∏©‡∏ï‡πà‡∏≤‡∏á ‡πÜ)
FEE_RATE_TAKER = 0.001       # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ taker fee (0.10%)
HEADROOM = 0.85              # ‡∏¢‡∏¥‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏§‡∏©‡∏é‡∏µ ‡πÄ‡∏ä‡πà‡∏ô 85%

# auto-retry ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô 51008
RETRY_STEP = 0.80            # ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 20%
MAX_RETRIES = 8              # ‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î 8 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏¥‡∏á‡πÉ‡∏´‡∏ç‡πà ‚Üí ‡πÉ‡∏ä‡πâ cap + ‡πÅ‡∏ï‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å
MAX_FIRST_ORDER_CONTRACTS = 12  # ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
CHUNK_SIZE = 4                   # ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤
CHUNK_PAUSE_SEC = 0.6            # ‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πâ‡∏≠‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

# ---------------- LOGGER ----------------
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("okx-oneway-bot")

# ---------------- INIT EXCHANGE ----------------
exchange = ccxt.okx({
    'apiKey': API_KEY,
    'secret': SECRET,
    'password': PASSWORD,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.verbose = False  # ‡∏õ‡∏¥‡∏î header logging ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏•‡∏∏‡∏î

# ---------------- FUNCTIONS ----------------
def get_margin_channels():
    """
    ‡∏Ñ‡∏∑‡∏ô (avail, ord_frozen, imr, mmr) ‡πÄ‡∏õ‡πá‡∏ô float
    - availBal: ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    - ordFrozen: ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ä‡πà‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á
    - imr/mmr: initial/maintenance margin ‡∏£‡∏ß‡∏°
    """
    try:
        bal = exchange.fetch_balance({'type': 'swap'})
        data = (bal.get('info', {}).get('data') or [])
        if not data:
            return 0.0, 0.0, 0.0, 0.0
        first = data[0]
        details = first.get('details')

        if isinstance(details, list):
            for item in details:
                if item.get('ccy') == 'USDT':
                    avail = float(item.get('availBal') or 0)
                    ord_frozen = float(item.get('ordFrozen') or 0)
                    imr = float(item.get('imr') or 0)
                    mmr = float(item.get('mmr') or 0)
                    return avail, ord_frozen, imr, mmr

        # fallback (‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏ô)
        avail = float(first.get('availBal') or first.get('cashBal') or first.get('eq') or 0)
        ord_frozen = float(first.get('ordFrozen') or 0)
        imr = float(first.get('imr') or 0)
        mmr = float(first.get('mmr') or 0)
        return avail, ord_frozen, imr, mmr
    except Exception as e:
        logger.error(f"‚ùå get_margin_channels error: {e}")
        return 0.0, 0.0, 0.0, 0.0

def get_current_price():
    try:
        t = exchange.fetch_ticker(SYMBOL)
        p = float(t['last'])
        logger.debug(f"üìà Current Price {SYMBOL}: {p}")
        return p
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.0

def get_contract_size(symbol):
    try:
        markets = exchange.load_markets()
        m = markets.get(symbol) or {}
        cs = float(m.get('contractSize') or 0.0)
        # OKX BTC-USDT-SWAP = 0.01 BTC/contract
        if cs <= 0 or cs >= 1:   # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï 0<cs<1 ‡πÄ‡∏ä‡πà‡∏ô 0.01, 0.001, 0.0001
            logger.warning(f"‚ö†Ô∏è contractSize ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ {cs} ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback = 0.01")
            return 0.01
        return cs
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á contractSize ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.01

def set_leverage(leverage: int):
    try:
        res = exchange.set_leverage(leverage, SYMBOL, params={'mgnMode': 'cross'})
        logger.info(f"üîß ‡∏ï‡∏±‡πâ‡∏á Leverage {leverage}x ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {res}")
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

def get_position_mode():
    try:
        resp = exchange.private_get_account_config()
        pos_mode = resp['data'][0]['posMode']  # 'net_mode' ‡∏´‡∏£‡∏∑‡∏≠ 'long_short_mode'
        logger.info(f"üìå Position Mode: {pos_mode}")
        return pos_mode
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á Position Mode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 'net_mode'

def cancel_all_open_orders(symbol: str):
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢ ordFrozen ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"""
    try:
        opens = exchange.fetch_open_orders(symbol)
        if not opens:
            return
        ids = [o['id'] for o in opens if o.get('id')]
        for oid in ids:
            try:
                exchange.cancel_order(oid, symbol)
                logger.info(f"üßπ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á: {oid}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {oid} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à open orders ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

def calc_contracts_by_margin(avail_usdt: float, price: float, contract_size: float) -> int:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á:
    - effective_avail = avail - FIXED_BUFFER_USDT
    - usable_cash = effective_avail * PORTFOLIO_PERCENTAGE * SAFETY_PCT
    - need_per_ct = (price * contract_size)/LEVERAGE + fee
    - max_ct = floor((usable_cash / need_per_ct) * HEADROOM)
    """
    if price <= 0 or contract_size <= 0:
        return 0

    effective_avail = max(0.0, avail_usdt - FIXED_BUFFER_USDT)
    usable_cash = effective_avail * PORTFOLIO_PERCENTAGE * SAFETY_PCT

    notional_per_ct = price * contract_size
    im_per_ct = notional_per_ct / LEVERAGE
    fee_per_ct = notional_per_ct * FEE_RATE_TAKER
    need_per_ct = im_per_ct + fee_per_ct
    if need_per_ct <= 0:
        return 0

    theoretical = usable_cash / need_per_ct
    logger.debug(
        f"üßÆ Sizing by margin | avail={avail_usdt:.4f}, eff_avail={effective_avail:.4f}, usable={usable_cash:.4f}, "
        f"notional_ct={notional_per_ct:.4f}, im_ct={im_per_ct:.4f}, fee_ct={fee_per_ct:.6f}, need_ct={need_per_ct:.4f}, "
        f"theoretical={theoretical:.4f}"
    )

    max_ct = int(math.floor(theoretical * HEADROOM))
    if max_ct < 0:
        max_ct = 0
    logger.debug(f"‚úÖ max_ct(final)={max_ct}")
    return max_ct

def open_long(contracts: int, pos_mode: str) -> bool:
    """
    ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÅ‡∏ö‡∏ö One-way (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á posSide) + auto-retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 51008
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    """
    if contracts <= 0:
        logger.warning("‚ö†Ô∏è Contracts <= 0 ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return False

    params = {'tdMode': 'cross'}  # One-way: ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á posSide
    current = int(contracts)
    attempt = 0

    while attempt < MAX_RETRIES and current >= 1:
        try:
            logger.debug(f"üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {SYMBOL} market buy {current} (attempt {attempt+1})")
            order = exchange.create_order(SYMBOL, 'market', 'buy', current, None, params)
            logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order}")
            return True
        except ccxt.ExchangeError as e:
            msg = str(e)
            logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {msg}")

            # ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡πÉ‡∏™‡πà posSide ‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
            if 'posSide' in msg or 'Position mode' in msg or '51000' in msg:
                params.pop('posSide', None)
                logger.warning("‚Üª ‡∏ï‡∏±‡∏î posSide ‡∏≠‡∏≠‡∏Å (One-way) ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
                attempt += 1
                continue

            # ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤
            if '51008' in msg or 'Insufficient' in msg:
                attempt += 1
                next_ct = int(math.floor(current * RETRY_STEP))
                if next_ct >= current:
                    next_ct = current - 1
                if next_ct < 1:
                    logger.warning("‚ö†Ô∏è ‡∏•‡∏î‡∏à‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                    return False
                logger.warning(f"‚Üª ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: {current} ‚Üí {next_ct}")
                current = next_ct
                time.sleep(0.5)
                continue

            # error ‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏¢‡∏∏‡∏î
            return False
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): {e}")
            return False
    return False

def open_long_in_chunks(contracts: int, pos_mode: str):
    """‡πÅ‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏¥‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô 51008"""
    if contracts <= 0:
        logger.warning("‚ö†Ô∏è Contracts <= 0 ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return

    remaining = int(contracts)
    while remaining > 0:
        lot = min(remaining, CHUNK_SIZE)
        ok = open_long(lot, pos_mode)
        if not ok:
            logger.warning("‚ö†Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ï‡∏Å‡∏Å‡πâ‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡πâ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô (margin ‡πÑ‡∏°‡πà‡∏û‡∏≠)")
            break
        remaining -= lot
        if remaining > 0:
            logger.debug(f"‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining} contracts ‚Üí ‡∏û‡∏±‡∏Å {CHUNK_PAUSE_SEC}s ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡∏¥‡∏á‡∏ï‡πà‡∏≠")
            time.sleep(CHUNK_PAUSE_SEC)

# ---------------- MAIN ----------------
if __name__ == "__main__":
    set_leverage(LEVERAGE)
    pos_mode = get_position_mode()
    avail, ord_frozen, imr, mmr = get_margin_channels()
    logger.info(f"üîç Margin channels | avail={avail:.4f} | ordFrozen={ord_frozen:.4f} | imr={imr:.4f} | mmr={mmr:.4f}")
    
    price = get_current_price()
    contract_size = get_contract_size(SYMBOL)
    logger.info(f"ü´ô ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ | avail_net={avail:.4f} USDT | price={price} | contractSize={contract_size}")

    contracts, need_per_ct = calc_contracts_by_margin(avail, price, contract_size, return_need_per_ct=True)

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏û‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏´‡∏°
    if (avail - FIXED_BUFFER_USDT) * PORTFOLIO_PERCENTAGE * HEADROOM < need_per_ct:
        logger.warning(
            f"‚ö†Ô∏è ‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ | "
            f"need_per_ct‚âà{need_per_ct:.4f} USDT, avail_net‚âà{avail:.4f} USDT "
            f"(‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° LEVERAGE ‡πÄ‡∏õ‡πá‡∏ô ‚â•30 ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô)"
        )
        sys.exit(0)  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

    open_long(contracts, pos_mode)
