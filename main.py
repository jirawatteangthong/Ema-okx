import os
import sys
import time
import math
import ccxt
import logging
import traceback

# ========= ENV CONFIG =========
API_KEY   = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET    = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD  = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')

SYMBOL     = os.getenv('SYMBOL', 'BTC/USDT:USDT')      # unified symbol (ccxt)
SYMBOL_ID  = os.getenv('SYMBOL_ID', 'BTC-USDT-SWAP')   # instId ‡∏Ç‡∏≠‡∏á OKX
LEVERAGE   = int(os.getenv('LEVERAGE', '15'))
PORTFOLIO_PERCENTAGE = float(os.getenv('PORTFOLIO_PERCENTAGE', '0.80'))
MIN_CONTRACTS = int(os.getenv('MIN_CONTRACTS', '1'))
LOOP_SLEEP_SECONDS = int(os.getenv('LOOP_SLEEP_SECONDS', '30'))

# ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î ‚Äú‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‚Äù + ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô 51008
SAFETY_PCT  = float(os.getenv('SAFETY_PCT', '0.85'))   # ‡πÉ‡∏ä‡πâ notional ‡πÅ‡∏Ñ‡πà 85% ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
RETRY_STEP  = float(os.getenv('RETRY_STEP', '0.90'))   # ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 10%
MAX_RETRIES = int(os.getenv('MAX_RETRIES', '5'))       # ‡∏•‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# ========= LOGGER =========
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("okx-oneway-bot")

# ========= EXCHANGE =========
exchange = ccxt.okx({
    'apiKey': API_KEY,
    'secret': SECRET,
    'password': PASSWORD,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.verbose = False  # üîí ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå header ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå

# ========= HELPERS =========
def resolve_market():
    """‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏•‡∏≤‡∏î + ‡πÅ‡∏Å‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á unified ‡πÅ‡∏•‡∏∞ id"""
    try:
        if (not API_KEY or not SECRET or not PASSWORD or
            'YOUR_OKX_API_KEY_HERE' in API_KEY or
            'YOUR_OKX_SECRET_HERE' in SECRET or
            'YOUR_OKX_PASSWORD_HERE' in PASSWORD):
            logger.error("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ENV: OKX_API_KEY / OKX_SECRET / OKX_PASSWORD")
            sys.exit(1)

        markets = exchange.load_markets()
        if SYMBOL in markets:
            mkt = markets[SYMBOL]
            logger.info(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏•‡∏≤‡∏î: {mkt['symbol']} (id={mkt['id']})")
            return mkt
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÇ‡∏î‡∏¢ id
        mbid = getattr(exchange, 'markets_by_id', None) or {}
        if SYMBOL_ID in mbid:
            mkt = mbid[SYMBOL_ID]
            logger.info(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏•‡∏≤‡∏î (‡∏à‡∏≤‡∏Å id): {mkt['symbol']} (id={mkt['id']})")
            return mkt

        raise ccxt.BadSymbol(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå (unified='{SYMBOL}', id='{SYMBOL_ID}')")
    except ccxt.AuthenticationError as e:
        logger.error(f"‚ùå AuthenticationError (API Key/Passphrase): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô load_markets/resolve_market: {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)

def get_available_margin_usdt() -> float:
    """‡∏î‡∏∂‡∏á USDT ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô Futures Cross ‡∏à‡∏≤‡∏Å availBal (‡πÑ‡∏°‡πà log header/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏¢‡∏≤‡∏ß)"""
    try:
        bal = exchange.fetch_balance({'type': 'swap'})
        data = (bal.get('info', {}).get('data') or [])
        if not data:
            return 0.0
        first = data[0]
        details = first.get('details')
        if isinstance(details, list):
            for item in details:
                if item.get('ccy') == 'USDT':
                    raw = item.get('availBal') or item.get('cashBal') or item.get('eq') or "0"
                    val = float(raw) if str(raw).strip() else 0.0
                    return val
        # fallback ‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        for key in ['availBal', 'cashBal', 'crossEq', 'availEq', 'eq']:
            raw = first.get(key)
            if raw is not None and str(raw).strip():
                return float(raw)
        return 0.0
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á available margin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0.0

def get_price(symbol) -> float:
    try:
        t = exchange.fetch_ticker(symbol)
        return float(t['last'])
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0.0

def get_contract_size(market) -> float:
    """‡∏Å‡∏±‡∏ô contractSize ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô: BTC perp ‡πÉ‡∏ä‡πâ 0.0001 ‡πÄ‡∏õ‡πá‡∏ô fallback"""
    try:
        size = float(market.get('contractSize') or 0.0)
        if size > 0.001 or size <= 0:
            logger.warning(f"‚ö†Ô∏è contractSize ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ {size} ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback = 0.0001")
            return 0.0001
        return size
    except Exception:
        logger.warning("‚ö†Ô∏è ‡∏î‡∏∂‡∏á contractSize ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ fallback = 0.0001")
        return 0.0001

def set_cross_leverage(market, leverage: int):
    try:
        res = exchange.set_leverage(leverage, market['symbol'], params={'mgnMode': 'cross'})
        logger.info(f"üîß ‡∏ï‡∏±‡πâ‡∏á Leverage {leverage}x ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {res}")
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())

def calc_contracts(avail_usdt: float, price: float, contract_size: float) -> int:
    """‡πÉ‡∏ä‡πâ notional = avail * pct * lev * safety ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤"""
    if price <= 0 or contract_size <= 0:
        return 0
    target_notional = avail_usdt * PORTFOLIO_PERCENTAGE * LEVERAGE * SAFETY_PCT
    target_btc = target_notional / price
    contracts = math.floor(target_btc / contract_size)
    logger.debug(
        f"üìä Calc: avail={avail_usdt:.4f}, pct={PORTFOLIO_PERCENTAGE}, lev={LEVERAGE}, "
        f"safety={SAFETY_PCT}, notional={target_notional:.4f}, btc={target_btc:.8f}, "
        f"size={contract_size}, contracts={contracts}"
    )
    return contracts

def open_long_oneway(market, contracts: int) -> bool:
    """
    ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö One-way mode (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á posSide)
    ‡∏°‡∏µ auto-retry ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ 51008: Insufficient margin
    """
    if contracts < MIN_CONTRACTS:
        logger.warning(f"‚ö†Ô∏è Contracts < {MIN_CONTRACTS}: {contracts} ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return False

    params = {'tdMode': 'cross'}
    attempt = 0
    current = int(contracts)

    while attempt <= MAX_RETRIES and current >= MIN_CONTRACTS:
        try:
            logger.debug(f"üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {market['symbol']} market buy {current} (attempt {attempt+1})")
            order = exchange.create_order(market['symbol'], 'market', 'buy', current, None, params)
            logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order}")
            return True
        except ccxt.ExchangeError as e:
            msg = str(e)
            logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {msg}")
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ (51008 / Insufficient) ‚Üí ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            if ('51008' in msg) or ('Insufficient' in msg):
                attempt += 1
                next_contracts = int(math.floor(current * RETRY_STEP))
                if next_contracts >= current:
                    next_contracts = current - 1
                if next_contracts < MIN_CONTRACTS:
                    logger.warning(f"‚ö†Ô∏è ‡∏•‡∏î‡∏à‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {MIN_CONTRACTS} ‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                    return False
                logger.warning(f"‚Üª ‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: {current} ‚Üí {next_contracts}")
                current = next_contracts
                continue
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏¢‡∏∏‡∏î
            return False
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): {e}")
            logger.debug(traceback.format_exc())
            return False

    logger.warning(f"‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö {MAX_RETRIES} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô")
    return False

def debug_margin_channels():
    """‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô: ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ ordFrozen/imr/mmr ‡∏Å‡∏¥‡∏ô margin ‡πÑ‡∏õ‡πÑ‡∏´‡∏° (‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 51008)"""
    try:
        bal = exchange.fetch_balance({'type':'swap'})
        data = (bal.get('info', {}).get('data') or [])
        if data and 'details' in data[0]:
            for item in data[0]['details']:
                if item.get('ccy') == 'USDT':
                    useful = {k: item.get(k) for k in ['availBal','cashBal','eq','ordFrozen','imr','mmr','mgnRatio']}
                    logger.info(f"üîç USDT channels: {useful}")
    except Exception:
        pass

# ========= MAIN LOOP =========
def main():
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó (One-way) + keep-alive loop")
    market = resolve_market()

    while True:
        try:
            price = get_price(market['symbol'])
            avail = get_available_margin_usdt()
            csize = get_contract_size(market)
            logger.info(f"ü´ô ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ | avail={avail:.4f} USDT | price={price} | contractSize={csize}")

            # ‡∏ï‡∏±‡πâ‡∏á Leverage (‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô reset ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ã‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ)
            set_cross_leverage(market, LEVERAGE)

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏ç‡∏ç‡∏≤ + ‡πÄ‡∏õ‡∏¥‡∏î
            contracts = calc_contracts(avail, price, csize)
            if contracts >= MIN_CONTRACTS:
                ok = open_long_oneway(market, contracts)
                if not ok:
                    debug_margin_channels()  # ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡∏ä‡πà‡∏≠‡∏á freeze
            else:
                logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏î‡πâ contracts={contracts} < {MIN_CONTRACTS} (‡πÄ‡∏û‡∏¥‡πà‡∏° LEVERAGE/‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏¥‡∏° USDT)")

        except Exception as loop_err:
            logger.error(f"‚ùå Loop error: {loop_err}")
            logger.debug(traceback.format_exc())

        time.sleep(LOOP_SLEEP_SECONDS)

if __name__ == "__main__":
    main()
