import os
import sys
import math
import time
import ccxt
import logging

# ================== CONFIG (‡∏ù‡∏±‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î) ==================
API_KEY  = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET   = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')

SYMBOL = 'BTC-USDT-SWAP'         # USDT-margined perp
CONTRACT_FALLBACK = 0.01         # BTC/contract (OKX BTC-USDT-SWAP)

# ‡πÑ‡∏•‡πà‡∏´‡∏≤ leverage ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
LEV_START = 10                   # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà 10x
LEV_STEP  = 5                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 5x
LEV_MAX   = 75                  # ‡πÄ‡∏û‡∏î‡∏≤‡∏ô 125x (OKX ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)

# ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö conservative
PORTFOLIO_PERCENTAGE = 0.80      # ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å avail_net
SAFETY_PCT = 0.85                # ‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
FIXED_BUFFER_USDT = 5.0          # ‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
FEE_RATE_TAKER = 0.001           # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ taker fee (0.10%)

# logger
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("okx-lev-scan-bot")

# ================== EXCHANGE ==================
exchange = ccxt.okx({
    'apiKey': API_KEY,
    'secret': SECRET,
    'password': PASSWORD,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.verbose = False  # ‡∏´‡πâ‡∏≤‡∏° log header ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå

# ================== HELPERS ==================
def get_margin_channels():
    """‡∏Ñ‡∏∑‡∏ô (avail, ord_frozen, imr, mmr) ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ swap ‡πÄ‡∏õ‡πá‡∏ô float"""
    try:
        bal = exchange.fetch_balance({'type':'swap'})
        data = (bal.get('info', {}).get('data') or [])
        if not data:
            return 0.0, 0.0, 0.0, 0.0
        first = data[0]
        details = first.get('details')
        if isinstance(details, list):
            for item in details:
                if item.get('ccy') == 'USDT':
                    avail = float(item.get('availBal') or 0)
                    ord_frozen = float(item.get('ordFrozen') or 0)
                    imr = float(item.get('imr') or 0)
                    mmr = float(item.get('mmr') or 0)
                    return avail, ord_frozen, imr, mmr
        # fallback
        avail = float(first.get('availBal') or first.get('cashBal') or first.get('eq') or 0)
        ord_frozen = float(first.get('ordFrozen') or 0)
        imr = float(first.get('imr') or 0)
        mmr = float(first.get('mmr') or 0)
        return avail, ord_frozen, imr, mmr
    except Exception as e:
        logger.error(f"‚ùå get_margin_channels error: {e}")
        return 0.0, 0.0, 0.0, 0.0

def get_current_price():
    try:
        t = exchange.fetch_ticker(SYMBOL)
        p = float(t['last'])
        logger.debug(f"üìà Price {SYMBOL}: {p}")
        return p
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.0

def get_contract_size(symbol):
    """OKX BTC-USDT-SWAP ‡∏õ‡∏Å‡∏ï‡∏¥ 0.01 BTC/contract"""
    try:
        markets = exchange.load_markets()
        m = markets.get(symbol) or {}
        cs = float(m.get('contractSize') or 0.0)
        if cs <= 0 or cs >= 1:
            logger.warning(f"‚ö†Ô∏è contractSize ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ {cs} ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ fallback = {CONTRACT_FALLBACK}")
            return CONTRACT_FALLBACK
        return cs
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á contractSize ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return CONTRACT_FALLBACK

def cancel_all_open_orders(symbol):
    """‡∏õ‡∏•‡∏î ordFrozen ‡πÇ‡∏î‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        opens = exchange.fetch_open_orders(symbol)
        if not opens:
            return
        for o in opens:
            try:
                exchange.cancel_order(o['id'], symbol)
                logger.info(f"üßπ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á: {o['id']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {o.get('id')} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à open orders ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

def set_leverage_isolated(leverage: int):
    """‡∏ï‡∏±‡πâ‡∏á isolated leverage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SYMBOL"""
    try:
        res = exchange.set_leverage(leverage, SYMBOL, params={'mgnMode':'isolated'})
        logger.info(f"üîß ‡∏ï‡∏±‡πâ‡∏á Leverage {leverage}x (isolated): {res}")
        return True
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return False

def preflight_can_afford_one_contract(avail_net: float, price: float, csize: float, leverage: int) -> (bool, float):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏´‡∏° (IM + fee) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô need_per_ct"""
    notional_ct = price * csize
    im_ct = notional_ct / leverage if leverage > 0 else float('inf')
    fee_ct = notional_ct * FEE_RATE_TAKER
    need_ct = im_ct + fee_ct
    usable_cash = max(0.0, avail_net - FIXED_BUFFER_USDT) * PORTFOLIO_PERCENTAGE * SAFETY_PCT
    ok = (usable_cash >= need_ct)
    logger.debug(
        f"üßÆ Preflight | lev={leverage}x | usable_cash={usable_cash:.4f} | "
        f"need_ct={need_ct:.4f} (im={im_ct:.4f}, fee={fee_ct:.4f})"
    )
    return ok, need_ct

def try_open_one_contract_isolated() -> bool:
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏ö‡∏ö isolated; ‡∏Ñ‡∏∑‡∏ô True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    params = {'tdMode':'isolated'}  # One-way ‚Üí ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á posSide
    try:
        logger.debug(f"üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {SYMBOL} market buy 1 (isolated)")
        order = exchange.create_order(SYMBOL, 'market', 'buy', 1, None, params)
        logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order}")
        return True
    except ccxt.ExchangeError as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): {e}")
        return False

# ================== MAIN (Leverage Scan) ==================
if __name__ == "__main__":
    # 1) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á
    cancel_all_open_orders(SYMBOL)

    # 2) ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    avail, ord_frozen, imr, mmr = get_margin_channels()
    avail_net = max(0.0, avail - ord_frozen)
    logger.info(f"üîç Margin | avail={avail:.4f} | ordFrozen={ord_frozen:.4f} | avail_net={avail_net:.4f} USDT")

    # 3) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ contract size
    price = get_current_price()
    csize = get_contract_size(SYMBOL)
    logger.info(f"ü´ô ‡∏™‡∏£‡∏∏‡∏õ | price={price} | contractSize={csize}")

    if price <= 0 or csize <= 0:
        logger.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤/contract size ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
        sys.exit(1)

    # 4) ‡∏•‡∏π‡∏õ‡πÑ‡∏•‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° leverage ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ
    found = False
    lev = LEV_START
    while lev <= LEV_MAX:
        # ‡∏ï‡∏±‡πâ‡∏á isolated leverage ‡∏Å‡πà‡∏≠‡∏ô
        ok_set = set_leverage_isolated(lev)
        if not ok_set:
            lev += LEV_STEP
            continue

        # ‡πÄ‡∏ä‡πá‡∏Å‡∏û‡∏≠‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏´‡∏° (‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ) ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á‡∏à‡∏£‡∏¥‡∏á
        can, need_ct = preflight_can_afford_one_contract(avail_net, price, csize, lev)
        if not can:
            logger.info(f"‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà {lev}x (need‚âà{need_ct:.4f} USDT) ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à")
            lev += LEV_STEP
            continue

        # ‡∏¢‡∏¥‡∏á‡∏à‡∏£‡∏¥‡∏á 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        if try_open_one_contract_isolated():
            logger.info(f"üéØ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Leverage ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á: {lev}x (isolated)")
            found = True
            break
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á 51008 ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Exchange ‚Üí ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à‡∏ï‡πà‡∏≠
            logger.info(f"‚ÑπÔ∏è ‡∏¢‡∏¥‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà {lev}x ‚Üí ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à")
            lev += LEV_STEP
            # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ô‡∏¥‡∏î ‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô rate-limit
            time.sleep(0.5)

    if not found:
        logger.warning(
            f"üö´ ‡∏•‡∏≠‡∏á‡∏ñ‡∏∂‡∏á {LEV_MAX}x ‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ\n"
            f"- ‡πÄ‡∏ï‡∏¥‡∏° USDT ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠\n"
            f"- ‡∏•‡∏î FIXED_BUFFER_USDT/‡πÄ‡∏û‡∏¥‡πà‡∏° PORTFOLIO_PERCENTAGE/SAFETY_PCT ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠\n"
            f"- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ contract size ‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤"
        )
