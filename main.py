import ccxt
import time
import requests
from datetime import datetime
import logging
import json
import os
import sys
import math

# ========================================================================

# 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (CONFIGURATION)

# ========================================================================

# ‚Äî API Keys & Credentials (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Environment Variables ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢) ‚Äî

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables: OKX_API_KEY, OKX_SECRET, OKX_PASSWORD

API_KEY = os.getenv(‚ÄòOKX_API_KEY‚Äô, ‚ÄòYOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING‚Äô)
SECRET = os.getenv(‚ÄòOKX_SECRET‚Äô, ‚ÄòYOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING‚Äô)
PASSWORD = os.getenv(‚ÄòOKX_PASSWORD‚Äô, ‚ÄòYOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING‚Äô)  # Passphrase for OKX

# ‚Äî Trade Parameters ‚Äî

SYMBOL = ‚ÄòBTC-USDT-SWAP‚Äô
LEVERAGE = 10
TP_DISTANCE_POINTS = 250
SL_DISTANCE_POINTS = 400
PORTFOLIO_PERCENTAGE = 0.50  # ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 50% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

# ‚Äî Telegram Settings ‚Äî

TELEGRAM_TOKEN = os.getenv(‚ÄòTELEGRAM_TOKEN‚Äô, ‚ÄòYOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING‚Äô)
TELEGRAM_CHAT_ID = os.getenv(‚ÄòTELEGRAM_CHAT_ID‚Äô, ‚ÄòYOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING‚Äô)

# ========================================================================

# 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging

# ========================================================================

logging.basicConfig(
level=logging.INFO,
format=‚Äô%(asctime)s - %(levelname)s - %(message)s‚Äô,
handlers=[
logging.FileHandler(‚Äòtest_bot.log‚Äô, encoding=‚Äòutf-8‚Äô),
logging.StreamHandler(sys.stdout)
]
)
logger = logging.getLogger(**name**)

# ========================================================================

# 3. Global Variables

# ========================================================================

exchange = None
market_info = None
current_position_details = None

# ========================================================================

# 4. Exchange Setup

# ========================================================================

def setup_exchange():
global exchange, market_info
try:
if not all([API_KEY, SECRET, PASSWORD]) or API_KEY == ‚ÄòYOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING‚Äô:
raise ValueError(‚Äú‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys ‡πÉ‡∏ô Environment Variables ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‚Äù)

```
    exchange = ccxt.okx({
        'apiKey': API_KEY,
        'secret': SECRET,
        'password': PASSWORD,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',
            'adjustForTimeDifference': True,
        },
        'verbose': False,
        'timeout': 30000,
    })
    
    exchange.set_sandbox_mode(False)
    exchange.load_markets()
    
    market_info = exchange.market(SYMBOL)
    if not market_info:
        raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {SYMBOL}")
    
    logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OKX Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage
    try:
        result = exchange.set_leverage(LEVERAGE, SYMBOL, params={'mgnMode': 'cross'})
        logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÄ‡∏õ‡πá‡∏ô {LEVERAGE}x ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÑ‡∏î‡πâ: {e}")
        
except Exception as e:
    logger.critical(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Exchange ‡πÑ‡∏î‡πâ: {e}")
    raise
```

# ========================================================================

# 5. Telegram Functions

# ========================================================================

def send_telegram(msg: str):
if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == ‚ÄòYOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING‚Äô:
logger.warning(‚Äú‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‚Äù)
return

```
try:
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
    response = requests.get(url, params=params, timeout=10)
    response.raise_for_status()
    logger.info(f"üì§ ‡∏™‡πà‡∏á Telegram: {msg[:50]}...")
except Exception as e:
    logger.error(f"‚ùå ‡∏™‡πà‡∏á Telegram ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
```

# ========================================================================

# 6. Portfolio & Position Functions

# ========================================================================

def get_portfolio_balance() -> float:
‚Äú‚Äù‚Äú‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT‚Äù‚Äù‚Äù
try:
balance_data = exchange.fetch_balance(params={‚Äòtype‚Äô: ‚Äòtrade‚Äô})

```
    usdt_balance = 0.0
    if 'USDT' in balance_data and 'free' in balance_data['USDT']:
        usdt_balance = float(balance_data['USDT']['free'])
    else:
        # ‡πÉ‡∏ä‡πâ OKX raw data
        okx_balance_info = balance_data.get('info', {}).get('data', [])
        for account in okx_balance_info:
            if account.get('ccy') == 'USDT' and account.get('type') == 'TRADE':
                usdt_balance = float(account.get('availBal', 0.0))
                break
    
    logger.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT: {usdt_balance:,.2f}")
    return usdt_balance
    
except Exception as e:
    logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ: {e}")
    return 0.0
```

def get_current_position():
‚Äú‚Äù‚Äú‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‚Äù‚Äù‚Äù
try:
positions = exchange.fetch_positions([SYMBOL])

```
    for pos in positions:
        pos_info = pos.get('info', {})
        pos_amount_str = pos_info.get('pos', '0')
        
        if float(pos_amount_str) != 0:
            pos_amount = abs(float(pos_amount_str))
            side = 'long' if float(pos_amount_str) > 0 else 'short'
            entry_price = float(pos_info.get('avgPx', 0.0))
            unrealized_pnl = float(pos_info.get('upl', 0.0))
            
            return {
                'side': side,
                'size': pos_amount,
                'entry_price': entry_price,
                'unrealized_pnl': unrealized_pnl
            }
    
    return None
    
except Exception as e:
    logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ: {e}")
    return None
```

# ========================================================================

# 7. Order Calculation Functions

# ========================================================================

def calculate_order_size(available_usdt: float, price: float) -> float:
‚Äú‚Äù‚Äú‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‚Äù‚Äù‚Äù
try:
# OKX BTC-USDT-SWAP: 1 contract = 0.0001 BTC
contract_size_btc = 0.0001

```
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì margin factor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 6.8% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 15x leverage)
    # ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°: 92.11 USDT margin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 1349.69 USDT notional
    margin_factor = 0.06824
    
    # ‡πÄ‡∏Å‡πá‡∏ö buffer 10% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    usable_usdt = available_usdt * 0.9
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì notional value ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ
    max_notional = usable_usdt / margin_factor
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï)
    target_notional = min(max_notional, available_usdt * PORTFOLIO_PERCENTAGE / margin_factor)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contracts
    target_btc = target_notional / price
    contracts = target_btc / contract_size_btc
    
    # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏•‡∏á
    contracts = math.floor(contracts)
    
    if contracts < 1:
        logger.warning(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contracts ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {contracts}")
        return 0
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©
    actual_notional = contracts * contract_size_btc * price
    required_margin = actual_notional * margin_factor
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ margin ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if required_margin > usable_usdt:
        logger.warning(f"‚ö†Ô∏è Margin ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {required_margin:.2f} ‡∏°‡∏µ {usable_usdt:.2f}")
        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contracts
        contracts = math.floor(usable_usdt / margin_factor / contract_size_btc / price)
        actual_notional = contracts * contract_size_btc * price
        required_margin = actual_notional * margin_factor
    
    logger.info(f"üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:")
    logger.info(f"   - Available USDT: {available_usdt:,.2f}")
    logger.info(f"   - Usable USDT (90%): {usable_usdt:,.2f}")
    logger.info(f"   - Contracts: {contracts}")
    logger.info(f"   - Notional Value: {actual_notional:,.2f} USDT")
    logger.info(f"   - Required Margin: {required_margin:,.2f} USDT")
    logger.info(f"   - Margin Ratio: {(required_margin/available_usdt)*100:.1f}%")
    
    return float(contracts)
    
except Exception as e:
    logger.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    return 0
```

def check_margin_requirements(contracts: float, price: float, available_usdt: float) -> bool:
‚Äú‚Äù‚Äú‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ margin ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‚Äù‚Äù‚Äù
try:
contract_size_btc = 0.0001
margin_factor = 0.06824

```
    notional = contracts * contract_size_btc * price
    required_margin = notional * margin_factor
    
    logger.info(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Margin:")
    logger.info(f"   - Contracts: {contracts}")
    logger.info(f"   - Notional: {notional:,.2f} USDT")
    logger.info(f"   - Required Margin: {required_margin:,.2f} USDT")
    logger.info(f"   - Available: {available_usdt:,.2f} USDT")
    logger.info(f"   - Margin Ratio: {(required_margin/available_usdt)*100:.1f}%")
    
    if required_margin > available_usdt * 0.95:  # ‡πÄ‡∏Å‡πá‡∏ö buffer 5%
        logger.warning("‚ö†Ô∏è Margin ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!")
        return False
    
    return True
    
except Exception as e:
    logger.error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö margin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    return False
```

# ========================================================================

# 8. Trading Functions

# ========================================================================

def open_long_position(current_price: float) -> bool:
‚Äú‚Äù‚Äú‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô Long‚Äù‚Äù‚Äù
try:
balance = get_portfolio_balance()
if balance <= 0:
logger.error(‚Äú‚ùå ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‚Äù)
return False

```
    contracts = calculate_order_size(balance, current_price)
    if contracts <= 0:
        logger.error("‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö margin ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    if not check_margin_requirements(contracts, current_price, balance):
        logger.error("‚ùå Margin ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        send_telegram(f"‚ùå <b>Margin ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!</b>\n"
                     f"üìä ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ contracts: {contracts}\n"
                     f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance:,.2f} USDT\n"
                     f"üí° ‡∏•‡∏≠‡∏á‡∏•‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï")
        return False
    
    logger.info(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Long {contracts} contracts ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {current_price:,.1f}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå Market Buy
    order = exchange.create_market_order(
        symbol=SYMBOL,
        side='buy',
        amount=contracts,
        params={
            'tdMode': 'cross',
        }
    )
    
    if order and order.get('id'):
        logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Order ID {order.get('id')}")
        send_telegram(f"üöÄ <b>‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n"
                     f"üìä Contracts: {contracts}\n"
                     f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: {current_price:,.1f}\n"
                     f"üÜî Order ID: {order.get('id')}")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå fill ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á TP/SL
        time.sleep(3)
        return set_tp_sl_for_long(current_price, contracts)
    else:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏î‡πâ")
        return False
        
except Exception as e:
    logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Long: {e}")
    send_telegram(f"‚ùå <b>‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\nError: {str(e)[:200]}")
    return False
```

def set_tp_sl_for_long(entry_price: float, contracts: float) -> bool:
‚Äú‚Äù‚Äú‡∏ï‡∏±‡πâ‡∏á TP/SL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô Long‚Äù‚Äù‚Äù
try:
tp_price = entry_price + TP_DISTANCE_POINTS
sl_price = entry_price - SL_DISTANCE_POINTS

```
    logger.info(f"üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á TP/SL:")
    logger.info(f"   - TP: {tp_price:,.1f} (+{TP_DISTANCE_POINTS} points)")
    logger.info(f"   - SL: {sl_price:,.1f} (-{SL_DISTANCE_POINTS} points)")
    
    current_price = get_current_price()
    if not current_price:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ")
        return False
    
    # ‡∏ï‡∏±‡πâ‡∏á Take Profit
    try:
        tp_order = exchange.create_order(
            symbol=SYMBOL,
            type='TAKE_PROFIT_MARKET',
            side='sell',
            amount=contracts,
            price=current_price,
            params={
                'triggerPrice': tp_price,
                'tdMode': 'cross',
                'reduceOnly': True,
            }
        )
        logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á TP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {tp_price:,.1f}")
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á TP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return False
    
    # ‡∏ï‡∏±‡πâ‡∏á Stop Loss
    try:
        sl_order = exchange.create_order(
            symbol=SYMBOL,
            type='STOP_LOSS_MARKET',
            side='sell',
            amount=contracts,
            price=current_price,
            params={
                'triggerPrice': sl_price,
                'tdMode': 'cross',
                'reduceOnly': True,
            }
        )
        logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sl_price:,.1f}")
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return False
    
    send_telegram(f"üìã <b>‡∏ï‡∏±‡πâ‡∏á TP/SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n"
                 f"üéØ TP: {tp_price:,.1f} (+{TP_DISTANCE_POINTS})\n"
                 f"üõ°Ô∏è SL: {sl_price:,.1f} (-{SL_DISTANCE_POINTS})")
    return True
    
except Exception as e:
    logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    return False
```

def get_current_price() -> float:
‚Äú‚Äù‚Äú‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‚Äù‚Äù‚Äù
try:
ticker = exchange.fetch_ticker(SYMBOL)
return float(ticker[‚Äòlast‚Äô])
except Exception as e:
logger.error(f‚Äù‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}‚Äù)
return 0.0

# ========================================================================

# 9. Main Function

# ========================================================================

def main():
‚Äú‚Äù‚Äú‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‚Äù‚Äù‚Äù
try:
logger.info(‚Äúü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô OKX Test Bot‚Äù)

```
    # Setup Exchange
    setup_exchange()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_pos = get_current_position()
    if current_pos:
        logger.info(f"‚ö†Ô∏è ‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {current_pos['side'].upper()} {current_pos['size']} contracts")
        send_telegram(f"‚ö†Ô∏è <b>‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!</b>\n"
                     f"üìä {current_pos['side'].upper()}: {current_pos['size']} contracts\n"
                     f"üí∞ Entry: {current_pos['entry_price']:,.1f}\n"
                     f"üìà PnL: {current_pos['unrealized_pnl']:,.2f} USDT")
        return
    
    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_price = get_current_price()
    if not current_price:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ")
        return
    
    logger.info(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ {SYMBOL} ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price:,.1f}")
    
    # ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    balance = get_portfolio_balance()
    if balance <= 0:
        logger.error("‚ùå ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        return
    
    # ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    target_usdt = balance * PORTFOLIO_PERCENTAGE
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì margin ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
    margin_factor = 0.06824
    estimated_margin = (target_usdt / margin_factor) * margin_factor
    
    send_telegram(f"üß™ <b>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó OKX</b>\n"
                 f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance:,.2f} USDT\n"
                 f"üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {PORTFOLIO_PERCENTAGE*100}% ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï\n"
                 f"üîß Margin ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {estimated_margin:,.2f} USDT\n"
                 f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC: {current_price:,.1f}\n"
                 f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Long...")
    
    # ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    success = open_long_position(current_price)
    
    if success:
        logger.info("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î
        time.sleep(2)
        final_pos = get_current_position()
        if final_pos:
            send_telegram(f"‚úÖ <b>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n"
                         f"üìä ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô: {final_pos['side'].upper()}\n"
                         f"üìà ‡∏Ç‡∏ô‡∏≤‡∏î: {final_pos['size']} contracts\n"
                         f"üí∞ Entry: {final_pos['entry_price']:,.1f}\n"
                         f"üìä PnL: {final_pos['unrealized_pnl']:,.2f} USDT")
    else:
        logger.error("‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        send_telegram("‚ùå <b>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs")
    
except Exception as e:
    logger.critical(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
    send_telegram(f"‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á!</b>\n{str(e)[:200]}")
```

# ========================================================================

# 10. Entry Point

# ========================================================================

if **name** == ‚Äò**main**‚Äô:
main()
