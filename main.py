import os
import sys
import ccxt
import math
import logging
import traceback

# ---------------- CONFIG ----------------
API_KEY = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')

SYMBOL = 'BTC-USDT-SWAP'
PORTFOLIO_PERCENTAGE = 0.80  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏µ‡πà % ‡∏Ç‡∏≠‡∏á margin
LEVERAGE = 15                # ‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
MIN_CONTRACTS = 1            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏™‡∏±‡∏ç‡∏ç‡∏≤

# ---------------- LOGGER ----------------
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("okx-long-bot")

# ---------------- INIT EXCHANGE ----------------
exchange = ccxt.okx({
    'apiKey': API_KEY,
    'secret': SECRET,
    'password': PASSWORD,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})

# ---------------- HELPERS ----------------
def validate_api_keys_and_load_markets():
    try:
        # 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ ENV ‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á
        if (not API_KEY or not SECRET or not PASSWORD or
            'YOUR_OKX_API_KEY_HERE' in API_KEY or
            'YOUR_OKX_SECRET_HERE' in SECRET or
            'YOUR_OKX_PASSWORD_HERE' in PASSWORD):
            logger.error("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OKX_API_KEY/OKX_SECRET/OKX_PASSWORD ‡πÉ‡∏ô ENV (.env)")
            sys.exit(1)

        # 2) ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏•‡∏≤‡∏î
        markets = exchange.load_markets()
        if SYMBOL not in markets:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå {SYMBOL} ‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î OKX")
            sys.exit(1)
        logger.debug("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # 3) ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå API ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á balance
        b = exchange.fetch_balance({'type': 'swap'})
        logger.debug(f"‚úÖ API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (fetch_balance ‡∏ú‡πà‡∏≤‡∏ô) snapshot: {b.get('info')}")
    except ccxt.AuthenticationError as e:
        logger.error(f"‚ùå AuthenticationError: ‡∏ï‡∏£‡∏ß‡∏à API Key/Secret/Passphrase ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á | {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except ccxt.ExchangeError as e:
        logger.error(f"‚ùå ExchangeError (load_markets/fetch_balance): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á validate/load_markets: {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)

def get_available_margin_usdt():
    """
    ‡∏î‡∏∂‡∏á USDT ‡∏ó‡∏µ‡πà '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Futures (Cross) ‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå availBal ‡∏Ç‡∏≠‡∏á‡∏™‡∏Å‡∏∏‡∏• USDT
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ details ‡πÉ‡∏ô payload
    """
    try:
        balance = exchange.fetch_balance({'type': 'swap'})
        info = balance.get('info', {})
        logger.debug(f"üì¶ Raw Balance Info: {info}")

        data_list = info.get('data') or []
        if not data_list:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö data ‡πÉ‡∏ô balance['info']")
            return 0.0

        # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á OKX v5: data[0]['details'] ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå per-ccy
        first = data_list[0]
        details = first.get('details')

        # 1) ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ details
        if isinstance(details, list) and details:
            for item in details:
                ccy = item.get('ccy')
                if ccy == 'USDT':
                    raw = item.get('availBal') or item.get('cashBal') or item.get('eq') or "0"
                    val = float(raw) if str(raw).strip() else 0.0
                    logger.debug(f"üí∞ Available Margin (USDT via details.availBal): {val}")
                    return val

        # 2) ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ details ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô key ‡∏ö‡∏ô‡∏ä‡∏±‡πâ‡∏ô data[0] (‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏ß‡∏°‡πÄ‡∏´‡∏°‡∏≤)
        for key in ['availBal', 'cashBal', 'crossEq', 'availEq', 'eq']:
            if key in first and str(first.get(key)).strip():
                try:
                    val = float(first.get(key))
                    logger.debug(f"üí∞ Available Margin (USDT via {key}): {val}")
                    return val
                except:
                    pass

        logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö USDT availBal/cashBal/crossEq/availEq/eq ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô payload")
        return 0.0

    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á available margin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0.0

def get_contract_size(symbol: str) -> float:
    try:
        m = exchange.market(symbol)
        size = float(m.get('contractSize') or 0.0)
        if size <= 0:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTC-USDT-SWAP ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ = 0.0001 BTC/contract
            size = 0.0001
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö contractSize ‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback = {size}")
        else:
            logger.debug(f"üìê contractSize = {size} BTC/contract")
        return size
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á contractSize ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        # fallback ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        return 0.0001

def get_current_price(symbol: str) -> float:
    try:
        t = exchange.fetch_ticker(symbol)
        price = float(t['last'])
        logger.debug(f"üìà Current Price {symbol}: {price}")
        return price
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0.0

def set_leverage(leverage: int):
    try:
        # ccxt okx mapping: set_leverage(leverage, symbol, params={'mgnMode': 'cross'})
        res = exchange.set_leverage(leverage, SYMBOL, params={'mgnMode': 'cross'})
        logger.info(f"üîß ‡∏ï‡∏±‡πâ‡∏á Leverage {leverage}x ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {res}")
    except ccxt.AuthenticationError as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (Auth): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except ccxt.InvalidOrder as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (InvalidOrder): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except ccxt.ExchangeError as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (ExchangeError): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)

def calculate_order_contracts(available_usdt: float, price: float, contract_size_btc: float) -> int:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏ö‡∏ö '‡πÉ‡∏ä‡πâ margin * percentage * leverage'
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Futures (notional = margin * leverage)
    """
    try:
        if price <= 0 or contract_size_btc <= 0:
            logger.warning(f"‚ö†Ô∏è price/contract_size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á price={price}, contract_size={contract_size_btc}")
            return 0

        # notional ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
        target_notional_usdt = available_usdt * PORTFOLIO_PERCENTAGE * LEVERAGE
        target_btc = target_notional_usdt / price
        contracts = math.floor(target_btc / contract_size_btc)

        logger.debug(
            f"üìä Calc contracts | avail_usdt={available_usdt:.4f}, pct={PORTFOLIO_PERCENTAGE}, lev={LEVERAGE}, "
            f"target_notional={target_notional_usdt:.4f} USDT, target_btc={target_btc:.8f}, "
            f"contract_size={contract_size_btc}, contracts={contracts}"
        )
        return int(contracts)
    except Exception as e:
        logger.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0

def open_long(contracts: int):
    """
    ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÅ‡∏ö‡∏ö Market
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î Hedge Mode ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á posSide ‡∏≠‡∏≤‡∏à error; ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ posSide ‡∏Å‡πà‡∏≠‡∏ô
      ‡∏ñ‡πâ‡∏≤ error ‡∏ó‡∏µ‡πà‡∏ä‡∏µ‡πâ‡∏ä‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà posSide ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    """
    if contracts < MIN_CONTRACTS:
        logger.warning(f"‚ö†Ô∏è Contracts ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {MIN_CONTRACTS}: {contracts} ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        return

    params = {
        'tdMode': 'cross',
        'posSide': 'long',  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ Hedge Mode ‡∏≠‡∏≤‡∏à error
    }

    logger.debug(f"üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: symbol={SYMBOL}, type=market, side=buy, amount={contracts}, params={params}")
    try:
        order = exchange.create_order(SYMBOL, 'market', 'buy', contracts, None, params)
        logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order}")
    except ccxt.InvalidOrder as e:
        msg = str(e)
        logger.error(f"‚ùå InvalidOrder ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Long: {msg}")
        logger.debug(traceback.format_exc())
        # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ posSide ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î Hedge Mode)
        if 'posSide' in msg or 'Position mode' in msg or 'Hedge' in msg:
            try:
                logger.warning("‚Üª ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà posSide (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î Hedge Mode)")
                params_fallback = {'tdMode': 'cross'}
                order = exchange.create_order(SYMBOL, 'market', 'buy', contracts, None, params_fallback)
                logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (fallback no posSide): {order}")
            except Exception as e2:
                logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (fallback): {e2}")
                logger.debug(traceback.format_exc())
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà retry
    except ccxt.AuthenticationError as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (Auth): {e}")
        logger.debug(traceback.format_exc())
    except ccxt.ExchangeError as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (ExchangeError): {e}")
        logger.debug(traceback.format_exc())
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏≠‡∏∑‡πà‡∏ô ‡πÜ): {e}")
        logger.debug(traceback.format_exc())

# ---------------- MAIN ----------------
if __name__ == "__main__":
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó: ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
    validate_api_keys_and_load_markets()

    # ‡∏ï‡∏±‡πâ‡∏á Leverage ‡∏Å‡πà‡∏≠‡∏ô
    set_leverage(LEVERAGE)

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ö margin
    price = get_current_price(SYMBOL)
    if price <= 0:
        logger.error("‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        sys.exit(1)

    available_usdt = get_available_margin_usdt()
    if available_usdt <= 0:
        logger.error("‚ùå Available Margin = 0 USDT (‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Futures Cross ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)")
        sys.exit(1)

    # ‡∏î‡∏∂‡∏á contract size
    contract_size = get_contract_size(SYMBOL)
    if contract_size <= 0:
        logger.error("‚ùå contractSize ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        sys.exit(1)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    contracts = calculate_order_contracts(available_usdt, price, contract_size)
    if contracts < MIN_CONTRACTS:
        logger.warning(
            f"‚ö†Ô∏è Contracts ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {MIN_CONTRACTS}: {contracts} "
            f"(‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° PORTFOLIO_PERCENTAGE ‡∏´‡∏£‡∏∑‡∏≠ LEVERAGE / ‡πÄ‡∏ï‡∏¥‡∏° margin ‡πÄ‡∏û‡∏¥‡πà‡∏°)"
        )
        sys.exit(0)

    # ‡πÄ‡∏õ‡∏¥‡∏î Long
    open_long(contracts)
