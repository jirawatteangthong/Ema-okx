import ccxt
import time
import requests
from datetime import datetime
import logging
import json
import os
import sys
import math

# ========================================================================
# 1. CONFIGURATION
# ========================================================================

API_KEY = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')

SYMBOL = 'BTC-USDT-SWAP'
LEVERAGE = 10
TP_DISTANCE_POINTS = 250
SL_DISTANCE_POINTS = 400
PORTFOLIO_PERCENTAGE = 0.80

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# ========================================================================
# 2. LOGGING
# ========================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ========================================================================
# 3. GLOBALS
# ========================================================================

exchange = None
market_info = None

# ========================================================================
# 4. EXCHANGE SETUP
# ========================================================================

def setup_exchange():
    global exchange, market_info
    try:
        if not all([API_KEY, SECRET, PASSWORD]) or API_KEY == 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING':
            raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys ‡πÉ‡∏ô Environment Variables ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")

        exchange = ccxt.okx({
            'apiKey': API_KEY,
            'secret': SECRET,
            'password': PASSWORD,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'swap',
                'adjustForTimeDifference': True,
            },
            'verbose': False,
            'timeout': 30000,
        })

        exchange.set_sandbox_mode(False)
        exchange.load_markets()
        market_info = exchange.market(SYMBOL)
        if not market_info:
            raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {SYMBOL}")

        logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OKX Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        try:
            exchange.set_leverage(LEVERAGE, SYMBOL, params={'mgnMode': 'cross'})
            logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÄ‡∏õ‡πá‡∏ô {LEVERAGE}x ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÑ‡∏î‡πâ: {e}")

    except Exception as e:
        logger.critical(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Exchange ‡πÑ‡∏î‡πâ: {e}")
        raise

# ========================================================================
# 5. TELEGRAM
# ========================================================================

def send_telegram(msg: str):
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING':
        logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Telegram Token - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        return
    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        requests.get(url, params=params, timeout=10)
        logger.info(f"üì§ ‡∏™‡πà‡∏á Telegram: {msg[:50]}...")
    except Exception as e:
        logger.error(f"‚ùå ‡∏™‡πà‡∏á Telegram ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

# ========================================================================
# 6. PORTFOLIO FUNCTIONS
# ========================================================================

def get_portfolio_balance() -> float:
    """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT"""
    try:
        balance_data = exchange.fetch_balance(params={'type': 'trade'})
        usdt_balance = 0.0

        if 'USDT' in balance_data and 'free' in balance_data['USDT']:
            usdt_balance = float(balance_data['USDT']['free'])
        else:
            okx_balance_info = balance_data.get('info', {}).get('data', [])
            for account in okx_balance_info:
                if account.get('ccy') == 'USDT':
                    usdt_balance = float(account.get('availBal', 0.0))
                    break

        logger.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT: {usdt_balance:,.2f}")
        return usdt_balance

    except Exception as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ: {e}")
        return 0.0

def get_margin_info():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Margin ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    try:
        balance_data = exchange.fetch_balance(params={'type': 'trade'})
        okx_balance_info = balance_data.get('info', {}).get('data', [])
        for acc in okx_balance_info:
            if acc.get('ccy') == 'USDT':
                avail = float(acc.get('availBal', 0))
                used = float(acc.get('frozenBal', 0))
                logger.info(f"üìä Margin Info: Available={avail:,.2f} USDT | Used={used:,.2f} USDT")
                return avail, used
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Margin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
    return 0.0, 0.0

def get_current_position():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        positions = exchange.fetch_positions([SYMBOL])
        for pos in positions:
            pos_info = pos.get('info', {})
            pos_amount_str = pos_info.get('pos', '0')

            if float(pos_amount_str) != 0:
                return {
                    'side': 'long' if float(pos_amount_str) > 0 else 'short',
                    'size': abs(float(pos_amount_str)),
                    'entry_price': float(pos_info.get('avgPx', 0.0)),
                    'unrealized_pnl': float(pos_info.get('upl', 0.0))
                }
        return None
    except Exception as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ: {e}")
        return None

# ========================================================================
# 7. ORDER FUNCTIONS
# ========================================================================

def calculate_order_size(available_usdt: float, price: float) -> float:
    try:
        # ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏û‡∏≠‡∏£‡πå‡∏ï
        target_usdt = available_usdt * PORTFOLIO_PERCENTAGE

        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤ BTC ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (OKX BTCUSDT Futures)
        contract_size_btc = 0.0001

        # ‚úÖ ‡πÉ‡∏ä‡πâ Leverage ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Notional
        target_usdt_with_leverage = target_usdt * LEVERAGE

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å USDT ‚Üí BTC
        target_btc = target_usdt_with_leverage / price

        # ‡∏õ‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö contract step
        contracts = math.floor(target_btc / contract_size_btc)

        if contracts < 1:
            logger.warning(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô contracts ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {contracts}")
            return 0

        actual_notional = contracts * contract_size_btc * price
        margin_required = actual_notional / LEVERAGE

        logger.info(
            f"üìä Order Size: Target={target_usdt:,.2f} USDT | "
            f"Leverage={LEVERAGE}x | Contracts={contracts} | "
            f"Notional={actual_notional:,.2f} USDT | "
            f"Margin Required={margin_required:,.2f} USDT"
        )

        # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if margin_required > available_usdt:
            logger.error(
                f"‚ùå Margin ‡πÑ‡∏°‡πà‡∏û‡∏≠! Available={available_usdt:.2f} USDT | ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ {margin_required:.2f} USDT"
            )
            return 0

        return float(contracts)

    except Exception as e:
        logger.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0

def get_current_price() -> float:
    try:
        ticker = exchange.fetch_ticker(SYMBOL)
        return float(ticker['last'])
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.0

# ========================================================================
# 8. TRADING
# ========================================================================

def open_long_position(current_price: float) -> bool:
    try:
        balance = get_portfolio_balance()
        if balance <= 0:
            logger.error("‚ùå ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            return False

        get_margin_info()  # ‚úÖ log margin ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå

        contracts = calculate_order_size(balance, current_price)
        if contracts <= 0:
            logger.error("‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            return False

        logger.info(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Long {contracts} contracts ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {current_price:,.1f}")
        order = exchange.create_market_order(
            symbol=SYMBOL,
            side='buy',
            amount=contracts,
            params={'tdMode': 'cross'}
        )

        if order and order.get('id'):
            logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Order ID {order.get('id')}")
            send_telegram(f"üöÄ <b>‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\nüìä Contracts: {contracts}\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: {current_price:,.1f}\nüÜî Order ID: {order.get('id')}")
            return True
        else:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏î‡πâ")
            return False

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Long: {e}")
        send_telegram(f"‚ùå <b>‡πÄ‡∏õ‡∏¥‡∏î Long ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\nError: {str(e)[:200]}")
        return False

# ========================================================================
# 9. MAIN
# ========================================================================

def main():
    try:
        logger.info("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô OKX Test Bot")
        setup_exchange()

        current_pos = get_current_position()
        if current_pos:
            logger.info(f"‚ö†Ô∏è ‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {current_pos['side'].upper()} {current_pos['size']} contracts")
            return

        current_price = get_current_price()
        if not current_price:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ")
            return

        logger.info(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ {SYMBOL} ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price:,.1f}")
        open_long_position(current_price)

    except Exception as e:
        logger.critical(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
        send_telegram(f"‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á!</b>\n{str(e)[:200]}")

# ========================================================================
# 10. ENTRY
# ========================================================================

if __name__ == '__main__':
    main()
