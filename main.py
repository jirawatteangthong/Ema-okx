import ccxt
import logging
import traceback
import time

# ==== CONFIG ====
API_KEY = os.getenv('OKX_API_KEY', 'YOUR_OKX_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('OKX_SECRET', 'YOUR_OKX_SECRET_HERE_FOR_LOCAL_TESTING')
PASSWORD = os.getenv('OKX_PASSWORD', 'YOUR_OKX_PASSWORD_HERE_FOR_LOCAL_TESTING')
SYMBOL = 'BTC-USDT-SWAP'
LEVERAGE = 10
ORDER_SIZE_USDT = 50  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
MIN_CONTRACTS = 1     # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î

# ==== LOGGER ====
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# ==== CONNECT OKX ====
exchange = ccxt.okx({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "password": PASSWORD,
    "enableRateLimit": True,
    "options": {"defaultType": "swap"}
})

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Margin ====
def get_available_margin():
    try:
        balance = exchange.fetch_balance({'type': 'swap'})
        logger.debug(f"üì¶ Raw Balance Info: {balance['info']}")

        data_list = balance['info']['data']
        usdt_info = None
        for item in data_list:
            if item.get('ccy') == 'USDT':
                usdt_info = item
                break

        if not usdt_info:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• USDT ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Futures Cross")
            return 0.0

        raw_value = usdt_info.get('availBal') or "0"
        cross_margin = float(raw_value) if raw_value.strip() else 0.0
        logger.debug(f"üí∞ Available Margin (Cross): {cross_margin} USDT")
        return cross_margin

    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• margin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        logger.debug(traceback.format_exc())
        return 0.0

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Contract Size ====
def get_contract_size(symbol):
    try:
        markets = exchange.load_markets()
        market_info = markets.get(symbol)
        if market_info and 'contractSize' in market_info:
            return float(market_info['contractSize'])
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö contractSize ‡∏Ç‡∏≠‡∏á {symbol}")
        return 0.0
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á contract size ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.0

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ====
def get_current_price(symbol):
    try:
        ticker = exchange.fetch_ticker(symbol)
        return float(ticker['last'])
    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return 0.0

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Long ====
def open_long(symbol, contracts):
    try:
        logger.debug(f"üöÄ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Long: {contracts} contracts")
        order = exchange.create_order(
            symbol=symbol,
            type='market',
            side='buy',
            amount=contracts
        )
        logger.info(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order}")
        return order
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        logger.debug(traceback.format_exc())
        return None

# ==== MAIN ====
def main():
    logger.info("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó ‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ===")

    # 1) ‡∏ï‡∏±‡πâ‡∏á leverage
    try:
        exchange.set_leverage(LEVERAGE, SYMBOL, {'mgnMode': 'cross'})
        logger.debug(f"‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á Leverage {LEVERAGE}x ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        logger.error(f"‚ùå ‡∏ï‡∏±‡πâ‡∏á Leverage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return

    # 2) ‡∏î‡∏∂‡∏á available margin
    available_margin = get_available_margin()
    if available_margin <= 0:
        logger.warning("‚ö†Ô∏è Margin ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
        return

    # 3) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ + contract size
    price = get_current_price(SYMBOL)
    contract_size = get_contract_size(SYMBOL)
    if price <= 0 or contract_size <= 0:
        logger.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ contract size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    # 4) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì contracts
    target_btc = ORDER_SIZE_USDT / price
    contracts = target_btc / contract_size
    logger.debug(f"üéØ Target BTC={target_btc} | Contracts={contracts} | Contract size BTC={contract_size}")

    if contracts < MIN_CONTRACTS:
        logger.warning(f"‚ö†Ô∏è Contracts ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {MIN_CONTRACTS}: {contracts}")
        return

    # 5) ‡πÄ‡∏õ‡∏¥‡∏î Long
    open_long(SYMBOL, contracts)

if __name__ == "__main__":
    main()
